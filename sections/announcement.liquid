{% comment %}
  Announcement Bar - Complete Implementation
  This file contains all necessary components to implement an announcement bar:
  - Section schema
  - HTML markup
  - CSS styles
  - JavaScript functionality
{% endcomment %}

{% schema %}
{
  "name": "Announcement bar",
  "class": "page-announcement",
  "settings": [
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "checkbox",
      "id": "show_border",
      "label": "Show border",
      "default": false
    },
    {
      "type": "select",
      "id": "layout",
      "label": "Layout",
      "options": [
        {
          "value": "slider",
          "label": "Slider"
        },
        {
          "value": "marquee",
          "label": "Scrolling text"
        }
      ]
    },
    {
      "type": "header",
      "content": "Slider"
    },
    {
      "type": "paragraph",
      "content": "Applies only if Layout is set to Slider"
    },
    {
      "type": "range",
      "id": "slider_speed",
      "label": "Autoplay speed",
      "unit": "sec",
      "min": 5,
      "max": 20,
      "step": 1,
      "default": 7
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "default": "center",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        }
      ]
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "Show arrows",
      "default": false
    },
    {
      "type": "header",
      "content": "Scrolling text"
    },
    {
      "type": "paragraph",
      "content": "Applies only if Layout is set to Scrolling text"
    },
    {
      "type": "range",
      "id": "marquee_speed",
      "label": "Autoplay speed",
      "unit": "%",
      "min": 50,
      "max": 300,
      "step": 25,
      "default": 100
    },
    {
      "type": "range",
      "id": "message_spacing",
      "label": "Space between messages",
      "default": 10,
      "min": 5,
      "max": 100,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "select",
      "id": "text_font_size",
      "label": "Text size",
      "info": "Automatically generated by the base size. Applies only when content in Text field is set to Paragraph.",
      "default": "body-small",
      "options": [
        {"value": "body-x-small", "label": "Extra small"},
        {"value": "body-small", "label": "Small"},
        {"value": "body-medium", "label": "Medium"},
        {"value": "body-large", "label": "Large"},
        {"value": "body-x-large", "label": "Extra large"}
      ]
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "default": "scheme_1",
      "label": "Color scheme"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border"
    },
    {
      "type": "header",
      "content": "Padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 15,
      "step": 1,
      "unit": "px",
      "label": "Top",
      "default": 5
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 15,
      "step": 1,
      "unit": "px",
      "label": "Bottom",
      "default": 5
    }
  ],
  "blocks" : [
    {
      "type": "text",
      "name": "Text announcement",
      "settings": [
        {
          "type": "richtext",
          "id": "text",
          "label": "Text",
          "default": "<p>New customers save 10% with code <strong>GET10</strong></p>"
        },
        {
          "type": "header",
          "content": "Target page"
        },
        {
          "id": "target_url_enabled",
          "type": "checkbox",
          "label": "Limit to specific page"
        },
        {
          "id": "target_url",
          "type": "url",
          "label": "Targeted page"
        },
        {
          "type": "header",
          "content": "Target referrer"
        },
        {
          "id": "target_referrer_enabled",
          "type": "checkbox",
          "label": "Limit to specific referrer path"
        },
        {
          "id": "target_referrer",
          "type": "text",
          "label": "Targeted referrer"
        },
        {
          "type": "header",
          "content": "Target device"
        },
        {
          "id": "target_device_enabled",
          "type": "checkbox",
          "label": "Limit to desktop or mobile"
        },
        {
          "type": "select",
          "id": "target_device",
          "label": "Device ",
          "default": "mobile",
          "options": [
            {"value": "mobile", "label": "Only show on mobile"},
            {"value": "desktop", "label": "Only show on desktop"}
          ]
        }
      ]
    },
    {
      "type": "message",
      "name": "Free shipping message",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_wheel",
          "label": "Show progress wheel",
          "default": false
        },
        {
          "type": "textarea",
          "id": "message",
          "label": "Message",
          "info": "Use ||amount|| to display progress towards free shipping.",
          "default": "You are ||amount|| away from free shipping."
        },
        {
          "type": "paragraph",
          "content": "Navigate to Theme settings -> \"Cart -> Free shipping message\" to set the amount."
        },
        {
          "type": "header",
          "content": "Target page"
        },
        {
          "id": "target_url_enabled",
          "type": "checkbox",
          "label": "Limit to specific page"
        },
        {
          "id": "target_url",
          "type": "url",
          "label": "Targeted page"
        },
        {
          "type": "header",
          "content": "Target referrer"
        },
        {
          "id": "target_referrer_enabled",
          "type": "checkbox",
          "label": "Limit to specific referrer path"
        },
        {
          "id": "target_referrer",
          "type": "text",
          "label": "Targeted referrer"
        },
        {
          "type": "header",
          "content": "Target device"
        },
        {
          "id": "target_device_enabled",
          "type": "checkbox",
          "label": "Limit to desktop or mobile"
        },
        {
          "type": "select",
          "id": "target_device",
          "label": "Device ",
          "default": "mobile",
          "options": [
            {"value": "mobile", "label": "Only show on mobile"},
            {"value": "desktop", "label": "Only show on desktop"}
          ]
        }
      ]
    },
    {
      "type": "code",
      "name": "Custom code",
      "settings": [
        {
          "type": "liquid",
          "id": "code",
          "label": "Code",
          "default": "<p>Custom code</p>"
        },
        {
          "type": "header",
          "content": "Target page"
        },
        {
          "id": "target_url_enabled",
          "type": "checkbox",
          "label": "Limit to specific page"
        },
        {
          "id": "target_url",
          "type": "url",
          "label": "Targeted page"
        },
        {
          "type": "header",
          "content": "Target referrer"
        },
        {
          "id": "target_referrer_enabled",
          "type": "checkbox",
          "label": "Limit to specific referrer path"
        },
        {
          "id": "target_referrer",
          "type": "text",
          "label": "Targeted referrer"
        },
        {
          "type": "header",
          "content": "Target device"
        },
        {
          "id": "target_device_enabled",
          "type": "checkbox",
          "label": "Limit to desktop or mobile"
        },
        {
          "type": "select",
          "id": "target_device",
          "label": "Device ",
          "default": "mobile",
          "options": [
            {"value": "mobile", "label": "Only show on mobile"},
            {"value": "desktop", "label": "Only show on desktop"}
          ]
        }
      ]
    },
    {
      "type": "countdown",
      "name": "Countdown timer",
      "settings": [
        {
          "type": "text",
          "id": "end_date",
          "label": "End date",
          "placeholder": "2023-12-31 23:59",
          "default": "2024-12-31",
          "info": "Use format \"YYYY-MM-DD\". Expiration date is based on the [store primary timezone](/admin/settings/general)."
        },
        {
          "type": "text",
          "id": "end_time",
          "label": "End time",
          "default": "11:59",
          "placeholder": "11:59",
          "info": "Use 12-hour time convention in format \"HH:MM\""
        },
        {
          "type": "radio",
          "id": "period",
          "label": "AM/PM",
          "options": [
            { "value": "am", "label": "AM" },
            { "value": "pm", "label": "PM" }
          ],
          "default": "am"
        },
        {
          "type": "richtext",
          "id": "end_message",
          "label": "End of timer message",
          "default": "<p>Offer has expired</p>"
        },
        {
          "type": "checkbox",
          "id": "hide_on_complete",
          "label": "Hide block after end of timer",
          "default": true
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Text",
          "default": "<p>Limited time offer</p>"
        }
      ]
    }
  ],
  "enabled_on": {
    "groups": ["header"]
  }
}
{% endschema %}

<!-- @prettify-ignore -->
{%- liquid
  assign is_top = false
  assign show_browser_error = false
  if section.location == 'header'
    assign is_top = true
    assign show_browser_error = true
  endif

  assign href = request.origin | append: request.path
  assign padding_top = section.settings.padding_top | default: 0
  assign padding_bottom = section.settings.padding_bottom | default: 0
  assign bg_color = section.settings.bg_color
  assign text_color = section.settings.color
  assign color_scheme = 'color-' | append: section.settings.color_scheme
  assign border_color = section.settings.border_color
  assign text_font_size = section.settings.text_font_size
  assign show_border = section.settings.show_border
  if section.location == 'header' and section.blocks.size == 0
    assign show_border = false
  endif
  assign show_arrows = section.settings.show_arrows | default: false
  assign text_align = section.settings.text_alignment | default: 'center'
  assign justify_content = 'flex-start'
  if text_align == 'center'
    assign justify_content = 'center'
  endif
  assign bar_markup = ''
  assign blocks_counter = 0
  assign block_count_desktop = 0
  assign block_count_mobile = 0
  assign announcement_height = 'max(var(--font-' | append: text_font_size | append: ') * var(--line-height-normal)), 36px)'
  assign announcement_modifier = ''
  assign style_root = ''
  assign marquee_time = 1.63
-%}

{%- for block in section.blocks -%}
  {%- liquid
    assign classes = 'announcement__slide'
    assign target_device_class = ''
    assign text_caps = ''

    if block.settings.type_font_caps
      assign text_caps = 'uppercase' | prepend: ' '
    endif
    if block.settings.text_font_size
      assign font_class = block.settings.text_font_size | append: text_caps
    else
      assign font_class = text_font_size | append: text_caps
    endif
    if block.settings.heading_font_size
      assign font_class = block.settings.heading_font_size | append: ' font-heading' | append: text_caps
    endif
    assign block_style = ''
    assign color = block.settings.color

    unless color == 'rgba(0,0,0,0)' or color == blank
      capture block_style
        echo '--text:' | append: color | append: ';'
      endcapture
    endunless

    assign show_bar = true

    if block.settings.target_url_enabled and block.settings.target_url != blank
      assign show_bar = false
    endif

    if block.settings.target_referrer_enabled and block.settings.target_referrer != blank
      assign show_bar = false
    endif

    if block.settings.target_url_enabled and block.settings.target_url != blank
      if block.settings.target_url == request.path
        assign show_bar = true
      endif
    endif

    if block.settings.target_referrer_enabled and block.settings.target_referrer != blank
      if href contains block.settings.target_referrer
        assign show_bar = true
      endif
    endif

    if block.settings.target_device_enabled and show_bar
      if block.settings.target_device == 'mobile'
        assign target_device_class = ' mobile'
        assign block_count_mobile = block_count_mobile | plus: 1
      endif

      if block.settings.target_device == 'desktop'
        assign target_device_class = ' desktop'
        assign block_count_desktop = block_count_desktop | plus: 1
      endif

      assign classes = classes | append: target_device_class
    endif
  -%}

  {%- capture block_attributes -%}
    {%- if classes != blank -%}
      class="{{ classes }}"
    {%- endif -%}

    data-slide="{{ block.id }}"
    data-slide-index="{{ forloop.index0 }}"
    data-block-id="{{ block.id }}"
    {{ block.shopify_attributes }}
  {%- endcapture -%}

  {%- if show_bar -%}
    {%- capture block_content -%}
      {%- if block.type == 'image' -%}
        {%- liquid
          assign image = block.settings.image
          assign image_aspect_ratio = image.aspect_ratio | default: 1
          assign image_width = block.settings.image_width
          assign sizes = image_width | append: 'px'
          assign width = image_width | times: 2
          assign width_retina = image_width | times: 2
          assign widths = '100, 120, 140, 160, 180, 200, 240, 280, 320, 360, ' | append: image_width | append: ', ' | append: width_retina
        -%}

        <div{% if section.settings.layout == 'slider' %} data-ticker-text{% endif %} class="announcement__image" style="width: {{ image_width }}px; height: {{ image_width | divided_by: image_aspect_ratio }}px; --mobile-image-width:{{ image_width | divided_by: 1.6 }}px;">
          {%- render 'image' image: image, sizes: sizes, width: width, widths: widths, show_backfill: false -%}
        </div>
      {%- else -%}
        <div class="{{ font_class | strip }}">
          {%- case block.type -%}
            {%- when 'heading' -%}

              {%- if block.settings.heading != blank -%}
                {{ block.settings.heading }}
              {%- endif -%}

            {%- when 'text' -%}

              {%- if block.settings.text != blank -%}
                {{ block.settings.text | replace: '|', '<span class="announcement__divider"></span>' }}
              {%- endif -%}

            {%- when 'message' -%}
              {%- if block.settings.message -%}
                {%- render 'free-shipping' message: block.settings.message, gradient: block.settings.free_shipping_gradient, show_wheel: block.settings.show_wheel, show_progress_bar: false -%}
              {%- endif -%}

            {%- when 'code' -%}
              {%- if block.settings.code != blank -%}
                {{ block.settings.code }}
              {%- endif -%}

            {%- when 'countdown' -%}
              <div class="countdown-block" data-countdown-block>
                <div class="countdown-block__text">
                  {%- if block.settings.text != blank -%}
                    {{ block.settings.text }}
                  {%- endif -%}
                </div>

                <div class="countdown-block__timer">
                  {%- render 'countdown-timer',
                    digits_size_desktop: 1,
                    digits_size_mobile: 1,
                    end_date: block.settings.end_date,
                    end_time: block.settings.end_time,
                    period: block.settings.period,
                    end_message: block.settings.end_message,
                    hide_on_complete: block.settings.hide_on_complete,
                  -%}
                </div>
              </div>

            {%- when 'collection' -%}
              {%- assign collection = collections[block.settings.collection] -%}

              <span>
                {%- if collection != empty -%}
                  {{ collection.title }}

                  {%- render 'superscript', superscript_collection: collection -%}
                {%- else -%}
                  {{ 'collections.general.items.heading' | t }}
                {%- endif -%}
              </span>

            {%- when 'advanced-text' -%}
              {%- if block.settings.text != blank -%}
                {%- assign scrolling_font = block.settings.type_font -%}

                {%- style -%}
                  #Announcement--{{ section.id }} .announcement__content--{{ block.id }} {
                    --scrolling-font-family: {{ scrolling_font.family }}, {{ scrolling_font.fallback_families }};
                    --scrolling-font-size: {{ block.settings.text_font_size_px }}px;
                    --scrolling-font-style: {{ scrolling_font.style }};
                    --scrolling-font-weight: {{ scrolling_font.weight }};
                    --scrolling-letter-spacing: {{ block.settings.type_letter_spacing | divided_by: 1000.0 | append: 'em' }};
                  }
                  {{ scrolling_font | font_face: font_display: 'swap' }}
                {%- endstyle -%}

                <div class="announcement__content announcement__content--{{ block.id }}">
                  {{ block.settings.text | replace: '|', '<span class="announcement__divider"></span>' }}
                </div>
              {%- endif -%}
          {%- endcase -%}
        </div>
      {%- endif -%}
    {%- endcapture -%}

    {%- capture bar_html -%}
      {%- if section.settings.layout == 'marquee' -%}
        <div class="announcement__slide{{ target_device_class }}" style="{{ block_style }}" {{ block.shopify_attributes }}>
          {{ block_content }}
        </div>
      {%- else -%}
        <ticker-bar style="{{ block_style }}" {{ block_attributes }}>
          <div data-ticker-frame class="announcement__message">
            <div data-ticker-scale class="announcement__scale ticker--unloaded">
              {%- if block.type == 'image' -%}
                {{ block_content }}
              {%- else -%}
                <div data-ticker-text class="announcement__text">
                  {{ block_content }}
                </div>
              {%- endif -%}
            </div>
          </div>
        </ticker-bar>
      {%- endif -%}
    {%- endcapture -%}

    {%- assign bar_markup = bar_markup | append: bar_html -%}
    {%- assign blocks_counter = blocks_counter | plus: 1 -%}
  {%- endif -%}
{%- endfor -%}

{%- capture style -%}
  --PT: {{ padding_top }}px;
  --PB: {{ padding_bottom }}px;

  --ticker-direction: {{ section.settings.direction | default: 'ticker-rtl' }};

  {%- unless color_scheme -%}
    {%- unless bg_color == 'rgba(0,0,0,0)' or bg_color == blank -%}
      --bg: {{ bg_color }};
      --bg-transparent: {{ bg_color | color_modify: 'alpha', 0 }};
    {%- else -%}
      --bg: transparent;
    {%- endunless -%}
  {%- endunless -%}

  {%- unless text_color == 'rgba(0,0,0,0)' or text_color == blank -%}
    --text: {{ text_color }};
    --link: {{ text_color }};
    --link-hover: {{ text_color }};
  {%- endunless -%}

  {%- unless border_color == 'rgba(0,0,0,0)' or border_color == blank -%}
    --border: {{ border_color }};
  {%- endunless -%}

  --text-size: var(--font-{{ text_font_size }});
  --text-align: {{ text_align }};
  --justify-content: {{ justify_content }};
{%- endcapture -%}

{%- if blocks_counter == 0 -%}
  {%- capture style_root -%}
    {{ style_root }}
    --ANNOUNCEMENT-HEIGHT-DESKTOP: 0px;
    --ANNOUNCEMENT-HEIGHT-MOBILE: 0px;
  {%- endcapture -%}
{%- elsif blocks_counter == block_count_desktop -%}
  {%- assign announcement_modifier = ' announcement__bar-outer--desktop' -%}
  {%- capture style_root -%}
    {{ style_root }}
    --ANNOUNCEMENT-HEIGHT-DESKTOP: {{ announcement_height }};
    --ANNOUNCEMENT-HEIGHT-MOBILE: 0px;
  {%- endcapture -%}
{%- elsif blocks_counter == block_count_mobile -%}
  {%- assign announcement_modifier = ' announcement__bar-outer--mobile' -%}
  {%- capture style_root -%}
    {{ style_root }}
    --ANNOUNCEMENT-HEIGHT-DESKTOP: 0px;
    --ANNOUNCEMENT-HEIGHT-MOBILE: {{ announcement_height }};
  {%- endcapture -%}
{%- else -%}
  {%- capture style_root -%}
    {{ style_root }}
    --ANNOUNCEMENT-HEIGHT-DESKTOP: {{ announcement_height }};
    --ANNOUNCEMENT-HEIGHT-MOBILE: {{ announcement_height }};
  {%- endcapture -%}
{%- endif -%}

{%- if is_top -%}
  {%- style -%}
    :root {
      {{ style_root }}
    }
  {%- endstyle -%}
{%- endif -%}

{%- if section.blocks.size > 0 -%}
  <script src="{{ 'ticker.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

<div id="Announcement--{{ section.id }}"
  class="announcement__wrapper{% if is_top %} announcement__wrapper--top{% endif %}{% if show_border %} announcement__wrapper--borders{% endif %} {{ color_scheme }}"
  data-announcement-wrapper
  data-section-id="{{ section.id }}"
  data-section-type="announcement"
  style="{{ style }}">
  {%- if show_browser_error -%}
    <div class="announcement__bar announcement__bar--error section-padding">
      <div class="announcement__message">
        <div class="announcement__text {{ text_font_size }}">
          <div class="announcement__main">{{ 'general.ie11_support_message' | t }}</div>
        </div>
      </div>
    </div>
  {%- endif -%}

  {%- if is_top == false and section.settings.background_image != blank -%}
    <div class="announcement__bg-image">
      {%- render 'image' image: section.settings.background_image, sizes: '100vw', cover: true -%}
    </div>
  {%- endif -%}

  {%- if section.blocks.size > 0 -%}
    {%- if bar_markup != blank -%}
      <announcement-bar class="announcement__bar-outer section-padding{{ announcement_modifier }}"
        style="--padding-scrolling: {{ section.settings.message_spacing }}px;">
        {%- if section.settings.layout == 'slider' -%}

          <div class="announcement__bar-holder announcement__bar-holder--slider{% if show_arrows and section.blocks.size > 1 %} announcement__bar-holder--arrows{% endif %}">
            <div class="announcement__slider"
              data-slider
              data-options='{"fade": true, "pageDots": false, "adaptiveHeight": false, "autoPlay": {{ section.settings.slider_speed | times: 1000 }}, "prevNextButtons": {{ show_arrows }}, "draggable": ">1"}'>
              {{ bar_markup }}
            </div>
          </div>
        {%- endif -%}

        {%- if section.settings.layout == 'marquee' -%}
          <div class="announcement__bar-holder announcement__bar-holder--marquee">
            <div class="announcement__bar">

              {%- comment -%}
                The "autoplay" attribute forces ticker to start playing by cloning its text elements 10 times
              {%- endcomment -%}

              <ticker-bar autoplay speed="{{ 100.0 | divided_by: section.settings.marquee_speed | times: marquee_time }}">
                <div data-ticker-frame class="announcement__message">
                  <div data-ticker-scale class="announcement__scale ticker--unloaded">
                    <div data-ticker-text class="announcement__text">
                      {{ bar_markup }}
                    </div>
                  </div>
                </div>
              </ticker-bar>
            </div>
          </div>
        {%- endif -%}
      </announcement-bar>
    {%- endif -%}
  {%- elsif is_top == false -%}
    {%- render 'no-blocks' -%}
  {%- endif -%}
</div>

{%- if request.design_mode -%}
  <script defer>
    document.addEventListener('shopify:block:select', (event) => {
      event.target.closest('announcement-bar')?.dispatchEvent(new CustomEvent('theme:block:select', { detail: event.detail }))
    });
    document.addEventListener('shopify:block:deselect', (event) => {
      event.target.closest('announcement-bar')?.dispatchEvent(new CustomEvent('theme:block:deselect', { detail: event.detail }))
    });
  </script>
{%- endif -%}

<style>
/* Announcement Bar CSS */
announcement-bar {
  --padding: var(--padding-scrolling, var(--outer));
  display: block;
}

.announcement__wrapper {
  --icon-offset: 0.2;
  --icon-size: max(var(--text-size) * 0.8, 18px);
  --btn-size: var(--icon-size);
  position: relative;
  overflow: hidden;
  background: var(--bg);
  line-height: var(--line-height-normal);
  transition: opacity 0.5s ease;
}
.announcement__wrapper .free-shipping__graph svg {
  width: var(--icon-size);
  height: var(--icon-size);
}

html:not(.no-js) body:not(.is-loaded) .announcement__wrapper {
  opacity: 0;
}

.announcement__wrapper--top {
  z-index: 5500;
}

.announcement__wrapper--top.announcement__wrapper--borders {
  border-top: 0;
}

.announcement__wrapper--borders {
  border-top: 1px solid var(--border);
  border-bottom: 1px solid var(--border);
}

.js .announcement__bar-holder--slider div:not(.flickity-enabled) .announcement__slide + .announcement__slide {
  opacity: 0;
}

@keyframes ticker-rtl {
  0% {
    transform: none;
    visibility: visible;
  }
  100% {
    transform: translateX(-100%);
  }
}
@keyframes ticker-ltr {
  0% {
    transform: translateX(-100%);
    visibility: visible;
  }
  100% {
    transform: none;
  }
}
.announcement__bar .flickity-slider {
  display: flex;
  align-items: center;
}

.announcement__slide {
  padding: 0 var(--padding) 0 0;
  width: 100%;
  color: var(--text);
}
@media (max-width: 749px){
  .scrolling-icons .announcement__slide {
    padding: 0 calc(var(--padding) / 2) 0 0;
  }
  .scrolling-icons .announcement__image{
    width: var(--mobile-image-width) !important;
  }
}
.announcement__slide.announcement__bar {
  padding: 0 var(--outer);
}

.announcement__slide > div {
  display: flex;
  min-height: var(--announcement-height);
  align-items: center;
  justify-content: var(--justify-content, center);
}

.announcement__content {
  font-family: var(--scrolling-font-family, inherit);
  font-size: var(--scrolling-font-size, inherit);
  font-style: var(--scrolling-font-style, inherit);
  font-weight: var(--scrolling-font-weight, inherit);
  letter-spacing: var(--scrolling-letter-spacing, normal);
}

.announcement__content strong {
  font-weight: var(--scrolling-font-weight-bold, var(--FONT-WEIGHT-BODY-BOLD));
}

.announcement__bg-image {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

.announcement__slide:not(.announcement__bar) {
  white-space: nowrap;
}

.announcement__slide:not(.announcement__bar) > * {
  width: 100%;
}

.announcement__bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  text-align: center;
}

.announcement__bar:not(.desktop):not(.mobile) {
  width: 100%;
}

.announcement__bar.desktop {
  width: 100%;
}
@media only screen and (max-width: 749px) {
  .announcement__bar.desktop {
    display: none;
  }
}

@media only screen and (min-width: 750px) {
  .announcement__bar.mobile {
    display: none;
    width: 0;
  }
}
@media only screen and (max-width: 749px) {
  .announcement__bar.mobile {
    width: 100%;
  }
}

.announcement__bar .icon {
  fill: currentcolor;
}

.announcement__bar--error {
  display: none;
}

.announcement__main {
  font-family: var(--FONT-STACK-BODY);
  font-weight: var(--FONT-WEIGHT-BODY-BOLD);
  font-style: var(--FONT-STYLE-BODY);
  letter-spacing: var(--LETTER-SPACING-BODY);
}

.announcement__text {
  display: flex;
  flex-flow: row nowrap;
  align-items: center;
  white-space: nowrap;
  min-height: var(--announcement-height);
}
.announcement__text p,
.announcement__text h1,
.announcement__text h2,
.announcement__text h3,
.announcement__text h4,
.announcement__text h5,
.announcement__text h6 {
  font-family: inherit;
  margin: 0;
}

.announcement__text.ticker--animated > .announcement__slide:first-child {
  padding-left: 0;
}

.announcement__bar-holder--marquee .announcement__text {
  min-height: 0;
}

.announcement__bar-holder--marquee .announcement__slide {
  min-height: var(--announcement-height);
}

.announcement__text > div {
  display: inline-flex;
  align-items: center;
}

@media only screen and (min-width: 750px) {
  .announcement__text > .mobile {
    display: none;
  }
}

@media only screen and (max-width: 749px) {
  .announcement__text > .desktop {
    display: none;
  }
}

.announcement__text a {
  position: relative;
}

.announcement__text .free-shipping {
  padding: 0;
  border: none;
  font-size: inherit;
  line-height: inherit;
  flex-wrap: nowrap;
  position: relative;
}

.announcement__text .free-shipping circle + circle {
  stroke: currentcolor;
}

.announcement__divider {
  margin-left: 10px;
  width: 0;
  height: 10%;
  border-left: 1px solid currentcolor;
}

.announcement__message {
  width: 100%;
  text-align: var(--text-align, center);
  font-size: 0;
}

.announcement__scale {
  display: inline-flex;
  transition: opacity 0.5s linear;
}

.announcement__scale.ticker--unloaded {
  width: max-content;
}

.announcement__bar-holder--slider > div {
  justify-content: var(--justify-content, center);
}

.announcement__bar-holder--slider.flickity-enabled .announcement__scale.ticker--unloaded {
  position: static;
}

.announcement__image {
  display: block;
  margin: 0 auto;
}
.announcement__image.svg-placeholder {
  background-color: transparent;
}

html:not(.js) .announcement__scale.ticker--unloaded {
  opacity: 1;
  position: static;
  width: auto;
}

.ticker--animated {
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  animation-name: var(--ticker-direction);
  animation-duration: var(--animation-time);
  animation-play-state: paused;
  display: inline-flex;
  align-items: center;
  width: max-content;
}
.ticker--animated:hover {
  animation-play-state: paused;
}

.announcement__slide:not(:only-child):not(.is-selected) .ticker--animated {
  animation-play-state: paused;
}

.announcement__bar-holder {
  position: relative;
}
.announcement__bar-holder .flickity-slider {
  display: flex;
  align-items: center;
}

.announcement__slider:not(.flickity-enabled) {
  display: flex;
  flex-wrap: nowrap;
  overflow: auto;
  justify-content: flex-start;
  scrollbar-width: none;
  -ms-overflow-style: none;
}
.announcement__slider:not(.flickity-enabled)::-webkit-scrollbar {
  display: none;
}
.announcement__slider:not(.flickity-enabled) .announcement__slide {
  flex: 1 0 100%;
}

.announcement__bar-holder--arrows .announcement__slider:not(.single-slide) {
  --arrow-space: var(--icon-size);
  --arrow-space-offset: calc(var(--arrow-space) * -1);
  margin-left: calc(var(--outer) + var(--icon-size));
  margin-right: calc(var(--outer) + var(--icon-size));
}
.announcement__bar-holder--arrows .announcement__slider:not(.single-slide) .announcement__slide.announcement__bar {
  padding: 0 20px;
}
.announcement__bar-holder--arrows .announcement__slider:not(.single-slide) .flickity-viewport::before, 
.announcement__bar-holder--arrows .announcement__slider:not(.single-slide) .flickity-viewport::after {
  content: "";
  position: absolute;
  z-index: 1;
  top: 0;
  bottom: 0;
  width: calc(var(--arrow-space) + 20px);
  pointer-events: none;
  transition: transform 0.2s ease-in-out;
}
.announcement__bar-holder--arrows .announcement__slider:not(.single-slide) .flickity-viewport::before {
  left: var(--arrow-space-offset);
  background: linear-gradient(90deg, var(--COLOR-BG) 80%, var(--COLOR-BG-TRANSPARENT, rgba(255, 255, 255, 0)) 100%);
}
.announcement__bar-holder--arrows .announcement__slider:not(.single-slide) .flickity-viewport::after {
  right: var(--arrow-space-offset);
  background: linear-gradient(-90deg, var(--COLOR-BG) 80%, var(--COLOR-BG-TRANSPARENT, rgba(255, 255, 255, 0)) 100%);
}
.announcement__bar-holder--arrows .announcement__slider:not(.single-slide) .flickity-prev-next-button {
  --icon-size: inherit;
  --btn-size: inherit;
  display: block;
  background-color: transparent;
  overflow: unset;
  box-shadow: none;
  z-index: 2;
  opacity: 1;
}
.announcement__bar-holder--arrows .announcement__slider:not(.single-slide) .flickity-prev-next-button::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  width: 40px;
  height: 40px;
  transform: translate(-50%, -50%);
  background: transparent;
}
.announcement__bar-holder--arrows .announcement__slider:not(.single-slide) .flickity-prev-next-button::before {
  background-color: var(--text);
}
.announcement__bar-holder--arrows .announcement__slider:not(.single-slide) .flickity-prev-next-button.previous {
  transform: none;
  left: var(--arrow-space-offset);
}
.announcement__bar-holder--arrows .announcement__slider:not(.single-slide) .flickity-prev-next-button.next {
  transform: none;
  right: var(--arrow-space-offset);
}

.no-js .announcement__bar-holder--slider .announcement__bar {
  top: 0;
  transform: none;
}

.announcement__bar-outer {
  width: 100%;
}

@media only screen and (max-width: 749px) {
  .announcement__bar-outer--desktop {
    padding-top: 0;
    padding-bottom: 0;
  }
}

@media only screen and (min-width: 750px) {
  .announcement__bar-outer--mobile {
    padding-top: 0;
    padding-bottom: 0;
  }
}

.announcement__bar-outer:not(:hover) .is-selected ticker-bar:not([paused]) .ticker--animated,
.announcement__bar-outer:not(:hover) ticker-bar[autoplay]:not([paused]) .ticker--animated,
.announcement__bar-outer:not(:hover) ticker-bar[data-slide]:not([paused]) .ticker--animated {
  animation-play-state: running;
}

html.supports-touch .is-selected ticker-bar:not([paused]) .ticker--animated,
html.supports-touch ticker-bar[autoplay]:not([paused]) .ticker--animated,
html.supports-touch ticker-bar[data-slide]:not([paused]) .ticker--animated {
  animation-play-state: running;
}

.ticker__comparitor {
  position: absolute;
  transform: translateY(-5000px);
  visibility: hidden;
}

.ie .announcement__bar--error {
  display: block;
  height: auto;
  padding-left: 15px;
  padding-right: 15px;
}
</style>

<script>
/* Ticker.js implementation */
!function(){"use strict";const t="[data-ticker-scale]",e="[data-ticker-text]",i="data-clone",s="autoplay",c="speed",h="ticker--animated",r="ticker--unloaded",a="ticker__comparitor",o=1.63,n=100;customElements.get("ticker-bar")||customElements.define("ticker-bar",class extends HTMLElement{constructor(){super(),this.autoplay=this.hasAttribute(s),this.scale=this.querySelector(t),this.text=this.querySelector(e),this.speed=this.hasAttribute(c)?this.getAttribute(c):o,this.comparitor=this.text.cloneNode(!0),this.comparitor.classList.add(a),this.appendChild(this.comparitor),this.scale.classList.remove(r),this.checkWidthEvent=this.checkWidth.bind(this)}connectedCallback(){this.checkWidth(),this.addEventListener("theme:ticker:refresh",function(t,e){let i;return function(){if(t){const s=()=>t.apply(this,arguments);clearTimeout(i),i=setTimeout(s,e)}}}((()=>this.checkWidthEvent()),50)),screen.orientation.addEventListener("change",this.checkWidthEvent),document.addEventListener("theme:resize:width",this.checkWidthEvent)}disconnectedCallback(){document.removeEventListener("theme:resize:width",this.checkWidthEvent)}checkWidth(){this.text=this.querySelector(e);const t=2*window.getComputedStyle(this).paddingLeft.replace("px",""),s=this.clientWidth-t<this.comparitor.clientWidth;if(s||this.autoplay){this.text.classList.remove(h);const c=this.scale.querySelectorAll(`[${i}]`),r=this.autoplay?parseInt((window.innerWidth-t)/this.text.clientWidth):2;if(c?.forEach((t=>{t.remove()})),this.autoplay||s)for(let t=0;t<=r;t++){const t=this.text.cloneNode(!0);t.setAttribute(i,""),this.scale.appendChild(t)}const a=(this.text.clientWidth/n*Number(this.speed)).toFixed(2);this.scale.style.removeProperty("--animation-time"),this.scale.style.setProperty("--animation-time",`${a}s`),this.scale.querySelectorAll(e)?.forEach((t=>{t.classList.add(h)}))}else{this.text.classList.add(h);this.scale.querySelectorAll(`[${i}]`).forEach((t=>{t.parentNode.removeChild(t)})),this.text.classList.remove(h)}}})}();
</script>

<script>
/* JavaScript implementation for AnnouncementBar */
class AnnouncementBar extends HTMLElement {
  constructor() {
    super();

    this.slider = this.querySelector('[data-slider]');
    this.enableSlider = window.innerWidth >= 750; // isDesktop
    this.slidesCount = this.querySelectorAll('.announcement__slide').length;
    this.initSliderEvent = (event) => this.initSlider(event);
  }

  connectedCallback() {
    if (this.slider) {
      this.initSliders();
    }

    this.addEventListener('theme:block:select', (e) => {
      this.onBlockSelect(e);
    });

    this.addEventListener('theme:block:deselect', (e) => {
      this.onBlockDeselect(e);
    });

    this.addEventListener('theme:countdown:hide', (e) => {
      if (window.Shopify && window.Shopify.designMode) return;

      const isMarquee = e.target.closest('.announcement__bar-holder--marquee');

      if (this.slidesCount === 1) {
        const tickerBar = this.querySelector('ticker-bar');
        tickerBar.style.display = 'none';
      }

      if (isMarquee) {
        const tickerText = e.target.closest('.announcement__slide');
        this.removeTickerText(tickerText);
      } else {
        const slide = e.target.closest('[data-slide]');
        this.removeSlide(slide);
      }
    });

    this.addEventListener('theme:countdown:expire', () => {
      this.querySelectorAll('ticker-bar')?.forEach((ticker) => {
        ticker.dispatchEvent(new CustomEvent('theme:ticker:refresh'));
      });
    });

    document.dispatchEvent(new CustomEvent('theme:announcement:init', {bubbles: true}));
  }

  initSliders() {
    this.initSlider();
    document.addEventListener('theme:resize:width', this.initSliderEvent);

    this.addEventListener('theme:slider:loaded', () => {
      this.querySelectorAll('ticker-bar')?.forEach((ticker) => {
        ticker.dispatchEvent(new CustomEvent('theme:ticker:refresh'));
      });
    });
  }

  initSlider() {
    const isDesktopView = window.innerWidth >= 750;
    const isMobileView = !isDesktopView;

    if ((isDesktopView && this.enableSlider) || (isMobileView && !this.enableSlider)) {
      if (this.slider.flkty) {
        this.slider.flkty.destroy();
      }

      if (isDesktopView && this.enableSlider) {
        this.enableSlider = false;
      } else if (isMobileView && !this.enableSlider) {
        this.enableSlider = true;
      }

      // Note: Slider initialization would typically be handled by a Slider class
      // For this standalone implementation, we'll use Flickity directly if available
      if (window.Flickity) {
        this.slider.flkty = new Flickity(this.slider, {
          fade: true, 
          pageDots: false, 
          adaptiveHeight: false, 
          autoPlay: parseInt(this.slider.dataset.options?.autoPlay || 7000), 
          prevNextButtons: this.slider.dataset.options?.prevNextButtons || false, 
          draggable: ">1"
        });
        this.dispatchEvent(new CustomEvent('theme:slider:loaded'));
      }
    }
  }

  removeSlide(slide) {
    if (this.slider.flkty) {
      this.slider.flkty.remove(slide);
      
      if (this.slider.flkty.cells.length === 0) {
        this.closest('.announcement__wrapper').classList.add('hidden');
      }
    }
  }

  removeTickerText(tickerText) {
    const ticker = tickerText.closest('ticker-bar');
    tickerText.remove();
    ticker.dispatchEvent(new CustomEvent('theme:ticker:refresh'));
  }

  onBlockSelect(e) {
    if (this.slider && this.slider.flkty) {
      const index = parseInt(e.detail.blockId.split('-').pop()) - 1;
      this.slider.flkty.select(index);
      this.slider.flkty.pausePlayer();
    }
  }

  onBlockDeselect(e) {
    if (this.slider && this.slider.flkty) {
      const autoPlay = parseInt(this.slider.dataset.options?.autoPlay || 7000);
      if (autoPlay > 0) {
        this.slider.flkty.playPlayer();
      }
    }
  }

  disconnectedCallback() {
    document.removeEventListener('theme:resize:width', this.initSliderEvent);

    this.removeEventListener('theme:block:select', (e) => {
      this.onBlockSelect(e);
    });

    this.removeEventListener('theme:block:deselect', (e) => {
      this.onBlockDeselect(e);
    });
  }
}

if (!customElements.get('announcement-bar')) {
  customElements.define('announcement-bar', AnnouncementBar);
}

// Helper functions to mimic theme functionality
document.addEventListener('DOMContentLoaded', function() {
  // Dispatch resize events for responsive behavior
  let resizeTimer;
  window.addEventListener('resize', function() {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(function() {
      document.dispatchEvent(new CustomEvent('theme:resize:width'));
    }, 250);
  });
});
</script> 